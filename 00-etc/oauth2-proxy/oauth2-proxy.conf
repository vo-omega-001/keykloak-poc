## OAuth2 Proxy Config File


## Secrets to update
client_id = "dm91bWVnYS5yZWFsbS5mb3Iua2V5Y2xvYWsyNi4zLjEK"
client_secret = "dm91bWVnYS5yZWFsbS5zZWNyZXQK"
#cookie_secret = "...."

## <addr>:<port> to listen on for HTTP/HTTPS clients
http_address = "127.0.0.1:4180"

## Skip provider choice button, directly open the login page
skip_provider_button = true

## Set behind reverse proxy to accept X-Real-Ip
reverse_proxy = true

## TLS Settings
# tls_cert_file = ""
# tls_key_file = ""

## Skip SSL checking for HTTPS requests
ssl_insecure_skip_verify = false

## Header configuraiton to send access_token to nginx / forward it to the backend
## Oauth2-proxy will add the token without 'Bearer ' in 'X-Auth-Request-Access-Token' header.
set_xauthrequest = true
pass_access_token = true
#Header Authorization Bearer to pass OIDC IDToken
set_authorization_header=true
pass_authorization_header=true


## OIDC provider configuration
provider = "oidc"
oidc_issuer_url="http://localhost:9090/voomega-oidc/realms/VOOMEGA-REALM"
skip_oidc_discovery = true
# backend_logout_url="http://localhost:9090/voomega-oidc/realms/VOOMEGA-REALM/protocol/openid-connect/logout?post_logout_redirect_uri=http%3A%2F%2Flocalhost:$server_port%2Foauth2%2Fsign_in;"
oidc_jwks_url="http://localhost:9090/voomega-oidc/realms/VOOMEGA-REALM/protocol/openid-connect/certs"
login_url = "http://localhost:9090/voomega-oidc/realms/VOOMEGA-REALM/protocol/openid-connect/auth"
redeem_url = "http://localhost:9090/voomega-oidc/realms/VOOMEGA-REALM/protocol/openid-connect/token"
validate_url = "http://localhost:9090/voomega-oidc/realms/VOOMEGA-REALM/protocol/openid-connect/userinfo"
insecure_oidc_allow_unverified_email = true
insecure_oidc_skip_issuer_verification = true

## the OAuth Redirect URL.
# defaults to the "https://" + requested host header + "/oauth2/callback"
redirect_url = "http://localhost:9090/oauth2/callback"


## the http url(s) of the upstream endpoint.
upstreams = [
    "static://404"
]

## Email Domains to allow authentication for (this authorizes any email on this domain)
## for more granular authorization use `authenticated_emails_file`
email_domains = [
    "*"
]

whitelist_domains = [
    "localhost", "localhost:9090"
]

## Cookie Settings
## Name     - the cookie name
## Domain   - (optional) cookie domain to force cookies to (ie: .yourcompany.com)
## Expire   - (duration) expire timeframe for cookie, for keycloak shall match keycloak token renew expire time (30m default time)
## Refresh  - (duration) refresh the cookie when duration has elapsed after cookie was initially set.
##            Should be less than cookie_expire; set to 0 to disable.
##            On refresh, OAuth token is re-validated.
##            (ie: 1h means tokens are refreshed on request 1hr+ after it was set)
##            For keycloak shall match keycloak access token expire time (5min default time)
## Secure   - secure cookies are only sent by the browser of a HTTPS connection (recommended)
## HttpOnly - httponly cookies are not readable by javascript (recommended)
cookie_name = "oauth2_proxy"
cookie_domains = "localhost"
cookie_expire = "30m"
cookie_refresh = "5m"
cookie_secure = false 
cookie_httponly = true
cookie_secret = "dm91bWVnYS5yZWFsbS5jb29raWUuc2VjcmV0LnNlYwo="
# metrics_address = ":9100"


 
## Logging configuration
standard_logging = true
standard_logging_format = "[{{.Timestamp}}] - oauth2-proxy - [{{.File}}] {{.Message}}"
request_logging = true
request_logging_format = "[{{.Timestamp}}] - oauth2-proxy - {{.Client}} - {{.Username}} {{.Host}} {{.RequestMethod}} {{.Upstream}} {{.RequestURI}} {{.Protocol}} {{.UserAgent}} {{.StatusCode}} {{.ResponseSize}} {{.RequestDuration}}"
auth_logging = true
auth_logging_format = "[{{.Timestamp}}] - oauth2-proxy - {{.Client}} - {{.Username}} [{{.Status}}] {{.Message}}"
